AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sample-sam-app

  Sample SAM Template for sample-sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    CodeUri: ./
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    Timeout: 180
    MemorySize: 1024
    Handler: handler.lambdaHandler
    Environment:
      Variables:
        SAMPLE_ENV:
          Ref: sampleEnv
        REGION:
          !Ref AWS::Region
        USER_POOL_ID:
          !Ref SampleApiUserPool
        USER_POOL_CLIENT_ID:
          !Ref SampleApiUserPoolClient
    Tracing: Disabled
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: false
Parameters:
  ENV:
    Type: String
  sampleEnv:
    Type: String

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref SampleApiGW
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - handler.ts

  HelloWorldFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${HelloWorldFunction}
      RetentionInDays: 14
  
  UserCertificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /create-user
            Method: post
            RestApiId: !Ref SampleApiGW
            Auth:
              Authorizer: NONE
              OverrideApiAuth: true
        InitPassword:
          Type: Api
          Properties:
            Path: /init-password
            Method: post
            RestApiId: !Ref SampleApiGW
            Auth:
              Authorizer: NONE
              OverrideApiAuth: true
        Login:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref SampleApiGW
            Auth:
              Authorizer: NONE
              OverrideApiAuth: true
        TokenReflesh:
          Type: Api
          Properties:
            Path: /token-reflesh
            Method: post
            RestApiId: !Ref SampleApiGW
            Auth:
              Authorizer: NONE
              OverrideApiAuth: true
        Logout:
          Type: Api
          Properties:
            Path: /logout
            Method: post
            RestApiId: !Ref SampleApiGW
            Auth:
              Authorizer: NONE
              OverrideApiAuth: true
      Policies:
      - Statement:
        - Sid: UserCertificationFunctionPolicy
          Effect: Allow
          Action:
          - cognito-idp:*
          Resource: '*'
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - handler.ts

  UserCertificationFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UserCertificationFunction}
      RetentionInDays: 14

  SampleApiGW:
    Type: AWS::Serverless::Api
    Properties:
      AlwaysDeploy: false
      # ApiKeySourceType: HEADER
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-CSRF-TOKEN,Access-Control-Allow-Origin, Authorization'"
        AllowOrigin: "'*'"
        # AllowCredentials: true
      Auth: 
        DefaultAuthorizer: SampleApiAuthorizer
        Authorizers:
          SampleApiAuthorizer:
            UserPoolArn: !GetAtt SampleApiUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          CachingEnabled: false
          CacheTtlInSeconds: 300
          ThrottlingBurstLimit: 1
          ThrottlingRateLimit: 2
      StageName: !Ref ENV
      OpenApiVersion: 3.0.1
      # DefinitionBody:
      #   Fn::Transform:
      #       Name: AWS::Include
      #       Parameters:
      #           Location: openapi.yaml
      # Domain:
      #   DomainName: "test-systems.link"
      #   CertificateArn: ""
      #   EndpointConfiguration: EDGE
      #   Route53:
      #     HostedZoneId: "Z0809995FMOP72VOF2FH"
      #   BasePath:
      #     - hoge
  
  SampleApiUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sample-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
  
  SampleApiUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SampleApiUserPool
      ClientName: sample-user-pool-client
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      GenerateSecret: false
      AccessTokenValidity: 5
      IdTokenValidity: 5
      RefreshTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: minutes
  
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SampleSamAppUrl:
    Description: API Gateway endpoint URL for Prod stage for sample sam apps
    Value: !Sub "https://${SampleApiGW}.execute-api.${AWS::Region}.amazonaws.com/${ENV}/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
